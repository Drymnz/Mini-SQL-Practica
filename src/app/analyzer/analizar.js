/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,17],$V2=[1,18],$V3=[1,19],$V4=[1,12],$V5=[1,16],$V6=[1,15],$V7=[1,14],$V8=[5,15,16,32,44,45,49,50,51,53,56],$V9=[1,21],$Va=[1,22],$Vb=[1,27],$Vc=[1,28],$Vd=[2,65],$Ve=[1,41],$Vf=[1,54],$Vg=[1,55],$Vh=[1,56],$Vi=[1,44],$Vj=[1,43],$Vk=[1,45],$Vl=[1,46],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,51],$Vq=[1,52],$Vr=[18,19,37,38,39,52,61,62,63,64,65],$Vs=[5,15,16,18,19,32,42,44,45,49,50,51,53,56],$Vt=[1,64],$Vu=[1,65],$Vv=[42,44,45,59],$Vw=[42,55],$Vx=[18,19],$Vy=[1,79],$Vz=[1,78],$VA=[5,15,16,18,19,23,32,37,38,39,42,44,45,49,50,51,53,56,59],$VB=[1,82],$VC=[1,80],$VD=[1,81],$VE=[1,83],$VF=[1,84],$VG=[1,85],$VH=[1,86],$VI=[1,87],$VJ=[1,88],$VK=[1,89],$VL=[1,90],$VM=[1,91],$VN=[1,92],$VO=[1,93],$VP=[1,94],$VQ=[5,15,16,18,19,23,32,37,38,39,40,42,44,45,49,50,51,53,56,59,67,68,69,70,71,72,73,74,75,76,77,78,79,80],$VR=[5,15,16,18,19,21,23,32,37,38,39,40,42,44,45,49,50,51,52,53,56,59,67,68,69,70,71,72,73,74,75,76,77,78,79,80],$VS=[19,21],$VT=[19,21,42],$VU=[1,114],$VV=[18,19,42],$VW=[42,59],$VX=[1,119],$VY=[1,120],$VZ=[1,121],$V_=[1,122],$V$=[1,123],$V01=[1,124],$V11=[15,16,32,44,45,49,50,51,53,56],$V21=[5,15,16,18,19,23,32,37,38,39,42,44,45,49,50,51,53,56,59,67,68,70,71,72,73,74,75,76,77,78,79,80],$V31=[5,15,16,18,19,23,32,37,38,39,42,44,45,49,50,51,53,56,59,77,78,79,80],$V41=[44,45],$V51=[18,19,42,44,45,46,52,59],$V61=[2,45],$V71=[1,153],$V81=[1,154],$V91=[5,15,16,18,19,23,32,37,38,39,42,44,45,49,50,51,53,56,59,70,71,72,73,74,75,76,77,78,79,80],$Va1=[1,159],$Vb1=[1,160],$Vc1=[1,161],$Vd1=[18,19,37,38,39];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"acciones":4,"EOF":5,"realizar":6,"tabla":7,"e_p_c":8,"asignar_informacion_tabla":9,"imprimir":10,"declarar":11,"asignar":12,"asignar_valor":13,"if":14,"END":15,"IF":16,"select":17,";":18,"ERROR":19,"e_f_t":20,"FROM":21,"e_t_f":22,"THEN":23,"e_d":24,"dato":25,"e_c_s":26,"col_todo":27,"e_a_c_t":28,"atributo_tabla":29,"e_f_t_t":30,"tipo_atributo":31,"SELECT":32,"nombre_atributo":33,"s_f":34,"v_f":35,"tipjo_filtro":36,"WHERE":37,"LIMIT":38,"OFFSET":39,"*":40,"bucle_serie":41,",":42,"serie":43,"PROPERTY_NAME":44,"TABLE_NAME":45,"NAMEV":46,"nombre_serie":47,"final_if":48,"ELSE":49,"ELSEIF":50,"SET":51,"=":52,"DECLARE":53,"secuencia_nombres":54,"AS":55,"PRINT":56,"(":57,"dato_secuencia":58,")":59,"nuveo_atributo":60,"INT":61,"STRING":62,"DECIMAL":63,"BOOLEAN":64,"TEX":65,"e":66,"+":67,"-":68,"/":69,"==":70,"!=":71,"<":72,"<=":73,">":74,">=":75,"<>":76,"OR":77,"AND":78,"||":79,"&&":80,"!":81,"NOT":82,"NUM":83,"INPUT":84,"TEXT":85,"u_v":86,"FALSE":87,"TRUE":88,"a_v":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"END",16:"IF",18:";",19:"ERROR",21:"FROM",23:"THEN",32:"SELECT",37:"WHERE",38:"LIMIT",39:"OFFSET",40:"*",42:",",44:"PROPERTY_NAME",45:"TABLE_NAME",46:"NAMEV",49:"ELSE",50:"ELSEIF",51:"SET",52:"=",53:"DECLARE",55:"AS",56:"PRINT",57:"(",59:")",61:"INT",62:"STRING",63:"DECIMAL",64:"BOOLEAN",65:"TEX",67:"+",68:"-",69:"/",70:"==",71:"!=",72:"<",73:"<=",74:">",75:">=",76:"<>",77:"OR",78:"AND",79:"||",80:"&&",81:"!",82:"NOT",83:"NUM",84:"INPUT",85:"TEXT",87:"FALSE",88:"TRUE"},
productions_: [0,[3,2],[4,2],[4,0],[6,2],[6,2],[6,2],[6,2],[6,2],[6,4],[6,2],[8,1],[8,1],[20,1],[20,1],[22,1],[22,1],[24,1],[24,1],[26,1],[26,1],[28,1],[28,1],[30,1],[30,1],[17,5],[34,1],[34,0],[35,2],[35,1],[36,2],[36,2],[36,2],[27,1],[27,1],[41,3],[41,1],[43,1],[43,1],[43,1],[47,3],[47,1],[14,5],[48,2],[48,5],[48,0],[13,2],[12,5],[12,3],[12,3],[12,1],[11,4],[54,3],[54,1],[10,4],[58,3],[58,1],[9,5],[9,3],[7,4],[29,2],[29,0],[60,2],[60,2],[33,1],[33,1],[31,1],[31,1],[31,1],[31,1],[31,1],[25,1],[66,3],[66,3],[66,3],[66,3],[66,2],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,2],[66,2],[66,1],[66,4],[66,1],[66,1],[66,1],[66,1],[86,2],[89,2],[89,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 60:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 61:
 this.$ = []; 
break;
case 4: case 5: case 6: case 7: case 8: case 10:
 this.$ = $$[$0-1]; 
break;
case 9:
 this.$ = $$[$0-3]; 
break;
case 11: case 13: case 15: case 17: case 19: case 21: case 23: case 64: case 65: case 70:
 this.$ = $$[$0]; 
break;
case 59:
 this.$ = new yy.Tabla(this._$.first_line, this._$.first_column, $$[$0-3], $$[$0-1]); 
break;
case 62:
 this.$ = new yy.Atributo(this._$.first_line, this._$.first_column, $$[$0-1], $$[$0]); 
break;
case 63:
this.$ = $$[$0];
break;
case 66:
 this.$ = yy.TipoDato.INT; 
break;
case 67:
 this.$ = yy.TipoDato.STRING; 
break;
case 68:
 this.$ = yy.TipoDato.DECIMAL; 
break;
case 69:
 this.$ = yy.TipoDato.BOOLEAN; 
break;
case 72:
this.$ = $$[$0-2] + $$[$0];
break;
case 73:
this.$ = $$[$0-2] - $$[$0];
break;
case 74:
this.$ = $$[$0-2] * $$[$0];
break;
case 75:
this.$ = $$[$0-2] / $$[$0];
break;
case 76:
this.$ = -$$[$0];
break;
case 77:
this.$ = $$[$0-1];
break;
case 91:
this.$ = Number(yytext);
break;
case 93:
  
break;
}
},
table: [o([5,16,32,44,45,51,53,56],$V0,{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,9:6,10:7,11:8,13:9,14:10,16:$V1,17:11,32:$V2,33:13,44:$V3,45:$V4,51:$V5,53:$V6,56:$V7},{1:[2,1]},o($V8,[2,2]),{8:20,18:$V9,19:$Va},{8:23,18:$V9,19:$Va,42:[1,24]},{8:25,18:$V9,19:$Va},{8:29,12:26,18:$V9,19:$Va,46:$Vb,52:$Vc},{8:30,18:$V9,19:$Va},{15:[1,31]},{8:32,18:$V9,19:$Va},{52:$Vd,57:[1,33]},{52:[1,34]},{57:[1,35]},{46:[1,37],54:36},{8:29,12:38,18:$V9,19:$Va,46:$Vb,52:$Vc},{19:$Ve,24:39,25:40,43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:42,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{19:[1,59],26:57,27:58,40:[1,60],41:61,43:62,44:$Vf,45:$Vg,46:$Vh},o($Vr,[2,64]),o($V8,[2,4]),o($Vs,[2,11]),o($Vs,[2,12]),o($V8,[2,5]),{33:63,44:$V3,45:$Vt},o($V8,[2,6]),o($V8,[2,7],{42:$Vu}),{52:[1,66]},{19:$Ve,24:67,25:40,43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:42,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},o($Vs,[2,50]),o($V8,[2,8]),{16:[1,68]},o($V8,[2,10]),o($Vv,[2,61],{28:69,29:70,19:[1,71]}),{19:$Ve,24:72,25:40,43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:42,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{19:$Ve,24:74,25:40,43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,58:73,66:42,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{42:[1,76],55:[1,75]},o($Vw,[2,53]),o($Vx,[2,46],{42:$Vu}),{19:$Vy,22:77,23:$Vz},o($VA,[2,17]),o($VA,[2,18]),o($VA,[2,71],{40:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP}),{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:95,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:96,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:97,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:98,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},o($VQ,[2,91]),{57:[1,99]},o($VQ,[2,93]),o($VQ,[2,94]),o($VQ,[2,95]),o($VQ,[2,96]),o($VQ,[2,99],{89:100,52:[1,101]}),o($VR,[2,37]),o($VR,[2,38]),o($VR,[2,39]),{19:[1,104],20:102,21:[1,103]},o($VS,[2,19]),o($VS,[2,20]),o($VS,[2,33]),o($VS,[2,34],{42:[1,105]}),o($VT,[2,36]),{52:[1,106]},o($Vr,$Vd),{46:[1,107]},{19:$Ve,24:108,25:40,43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:42,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{8:109,18:$V9,19:$Va},{8:110,18:$V9,19:$Va},{59:[1,111]},{33:113,42:$VU,44:$V3,45:$Vt,59:[2,21],60:112},{59:[2,22]},o($VV,[2,58]),{42:[1,116],59:[1,115]},o($VW,[2,56]),{19:$VX,30:117,31:118,61:$VY,62:$VZ,63:$V_,64:$V$,65:$V01},{46:[1,125]},o($V11,$V0,{4:126}),o($V11,[2,15]),o($V11,[2,16]),{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:127,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:128,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:129,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:130,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:131,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:132,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:133,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:134,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:135,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:136,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:137,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:138,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:139,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:140,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:141,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},o($V21,[2,76],{40:$VB,69:$VE}),{40:$VB,59:[1,142],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP},o($VA,[2,89],{40:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP}),o($V31,[2,90],{40:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),{85:[1,143]},o($VQ,[2,97]),{43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:144,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{33:145,44:$V3,45:$Vt},o($V41,[2,13]),o($V41,[2,14]),{43:146,44:$Vf,45:$Vg,46:$Vh},{19:$Ve,24:147,25:40,43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:42,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{52:[1,148]},o($Vs,[2,48]),o($Vs,[2,49]),o($V8,[2,9]),o($Vx,[2,59]),o($Vv,[2,60]),{19:$VX,30:149,31:118,61:$VY,62:$VZ,63:$V_,64:$V$,65:$V01},{33:113,42:$VU,44:$V3,45:$Vt,60:150},o($Vx,[2,54]),{19:$Ve,24:151,25:40,43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:42,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},o([18,19,46,52],[2,51]),o($V51,[2,23]),o($V51,[2,24]),o($V51,[2,66]),o($V51,[2,67]),o($V51,[2,68]),o($V51,[2,69]),o($V51,[2,70]),o($Vw,[2,52]),{6:4,7:5,9:6,10:7,11:8,13:9,14:10,15:$V61,16:$V1,17:11,32:$V2,33:13,44:$V3,45:$V4,48:152,49:$V71,50:$V81,51:$V5,53:$V6,56:$V7},o($V21,[2,72],{40:$VB,69:$VE}),o($V21,[2,73],{40:$VB,69:$VE}),o($VQ,[2,74]),o($VQ,[2,75]),o($V91,[2,78],{40:$VB,67:$VC,68:$VD,69:$VE}),o($V91,[2,79],{40:$VB,67:$VC,68:$VD,69:$VE}),o($V91,[2,80],{40:$VB,67:$VC,68:$VD,69:$VE}),o($V91,[2,81],{40:$VB,67:$VC,68:$VD,69:$VE}),o($V91,[2,82],{40:$VB,67:$VC,68:$VD,69:$VE}),o($V91,[2,83],{40:$VB,67:$VC,68:$VD,69:$VE}),o($V91,[2,84],{40:$VB,67:$VC,68:$VD,69:$VE}),o($V31,[2,85],{40:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($V31,[2,86],{40:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o([5,15,16,18,19,23,32,37,38,39,42,44,45,49,50,51,53,56,59,79,80],[2,87],{40:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN}),o([5,15,16,18,19,23,32,37,38,39,42,44,45,49,50,51,53,56,59,80],[2,88],{40:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($VQ,[2,77]),{59:[1,155]},o($V91,[2,98],{40:$VB,67:$VC,68:$VD,69:$VE}),o($Vx,[2,27],{34:156,35:157,36:158,37:$Va1,38:$Vb1,39:$Vc1}),o($VT,[2,35]),o($VV,[2,57]),{19:$Ve,24:162,25:40,43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:42,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},o($Vv,[2,62]),o($Vv,[2,63]),o($VW,[2,55]),{15:[2,42]},o([15,16,32,44,45,51,53,56],$V0,{4:163}),{19:$Ve,24:164,25:40,43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:42,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},o($VQ,[2,92]),o($Vx,[2,25]),o($Vx,[2,26],{36:165,37:$Va1,38:$Vb1,39:$Vc1}),o($Vd1,[2,29]),{19:$Ve,24:166,25:40,43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:42,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{19:$Ve,24:167,25:40,43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:42,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},{19:$Ve,24:168,25:40,43:53,44:$Vf,45:$Vg,46:$Vh,57:$Vi,66:42,68:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:50,87:$Vp,88:$Vq},o($Vs,[2,47]),{6:4,7:5,9:6,10:7,11:8,13:9,14:10,15:[2,43],16:$V1,17:11,32:$V2,33:13,44:$V3,45:$V4,51:$V5,53:$V6,56:$V7},{19:$Vy,22:169,23:$Vz},o($Vd1,[2,28]),o($Vd1,[2,30]),o($Vd1,[2,31]),o($Vd1,[2,32]),o($V11,$V0,{4:170}),{6:4,7:5,9:6,10:7,11:8,13:9,14:10,15:$V61,16:$V1,17:11,32:$V2,33:13,44:$V3,45:$V4,48:171,49:$V71,50:$V81,51:$V5,53:$V6,56:$V7},{15:[2,44]}],
defaultActions: {3:[2,1],71:[2,22],152:[2,42],171:[2,44]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    function printText(yytext) {
        /*sector de pruevas*/
    console.log(yytext);
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:/* skip whitespace */
break;
case 3:
break;
case 4:
break;
case 5:
break;
case 6:
break;
case 7:printText(yy_.yytext+'  TEXT');return 85; 
break;
case 8:printText(yy_.yytext+'  TRUE');return 88;
break;
case 9:printText(yy_.yytext+'  FALSE');return 87;
break;
case 10:printText(yy_.yytext+'  NUM');return 83;
break;
case 11:printText(yy_.yytext+'  NAMEV');return 46
break;
case 12:printText(yy_.yytext+'  DECLARE');return 53
break;
case 13:printText(yy_.yytext+'  AS');return 55
break;
case 14:printText(yy_.yytext+'  SET');return 51
break;
case 15:printText(yy_.yytext+'  AND');return 78
break;
case 16:printText(yy_.yytext+'  OR');return 77
break;
case 17:printText(yy_.yytext+'  NOT');return 82
break;
case 18:printText(yy_.yytext+'  INPUT');return 84
break;
case 19:printText(yy_.yytext+'  PRINT');return 56
break;
case 20:printText(yy_.yytext+'  IF');return 16
break;
case 21:printText(yy_.yytext+'  THEN');return 23
break;
case 22:printText(yy_.yytext+'  END');return 15
break;
case 23:printText(yy_.yytext+'  END');return 15
break;
case 24:printText(yy_.yytext+'  ELSE');return 49
break;
case 25:printText(yy_.yytext+'  ELSEIF');return 50
break;
case 26:printText(yy_.yytext+'  SELECT');return 32
break;
case 27:printText(yy_.yytext+'  FROM');return 21
break;
case 28:printText(yy_.yytext+'  WHERE');return 37
break;
case 29:printText(yy_.yytext+'  LIMIT');return 38
break;
case 30:printText(yy_.yytext+'  OFFSET');return 39
break;
case 31:printText(yy_.yytext+'  INT');return 61;
break;
case 32:printText(yy_.yytext+'  STRING');return 62;
break;
case 33:printText(yy_.yytext+'  TEX');return 65;
break;
case 34:printText(yy_.yytext+'  DECIMAL');return 63;
break;
case 35:printText(yy_.yytext+'  BOOLEAN');return 64;
break;
case 36:printText(yy_.yytext+'  *');return 40;
break;
case 37:printText(yy_.yytext+'  /');return 69;
break;
case 38:printText(yy_.yytext+'  -');return 68;
break;
case 39:printText(yy_.yytext+'  +');return 67;
break;
case 40:printText(yy_.yytext+'  !=');return 71;
break;
case 41:printText(yy_.yytext+'  ==');return 70;
break;
case 42:printText(yy_.yytext+'  <=');return 73;
break;
case 43:printText(yy_.yytext+'  >=');return 75;
break;
case 44:printText(yy_.yytext+'  <>');return 76;
break;
case 45:printText(yy_.yytext+'  <');return 72;
break;
case 46:printText(yy_.yytext+'  >');return 74;
break;
case 47:printText(yy_.yytext+'  !');return 81;
break;
case 48:printText(yy_.yytext+'  ||');return 79;
break;
case 49:printText(yy_.yytext+'  &&');return 80;
break;
case 50:printText(yy_.yytext+'  (');return 57;
break;
case 51:printText(yy_.yytext+'  )');return 59;
break;
case 52:printText(yy_.yytext+'  ;');return 18;
break;
case 53:printText(yy_.yytext+'  ,');return 42;
break;
case 54:printText(yy_.yytext+'  =');return 52;
break;
case 55:printText(yy_.yytext+'  PROPERTY_NAME');return 44
break;
case 56:printText(yy_.yytext+'  TABLE_NAME');return 45
break;
case 57:printText(yy_.yytext+'  EOF');return 5;
break;
case 58:printText(yy_.yytext+'  INVALID');return 'INVALID';
break;
}
},
rules: [/^(?:[#][^\n]*\n)/,/^(?:[-][-][^\n]*\n)/,/^(?:\s+)/,/^(?:\f+)/,/^(?:\n+)/,/^(?:\r+)/,/^(?:\v+)/,/^(?:("[^\"]*"|['][^']*[']))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:@([a-zA-Z]([a-zA-Z0-9])+))/,/^(?:DECLARE\b)/,/^(?:AS\b)/,/^(?:SET\b)/,/^(?:AND\b)/,/^(?:OR\b)/,/^(?:NOT\b)/,/^(?:INPUT\b)/,/^(?:PRINT\b)/,/^(?:IF\b)/,/^(?:THEN\b)/,/^(?:END\b)/,/^(?:END\b)/,/^(?:ELSE\b)/,/^(?:ELSEIF\b)/,/^(?:SELECT\b)/,/^(?:FROM\b)/,/^(?:WHERE\b)/,/^(?:LIMIT\b)/,/^(?:OFFSET\b)/,/^(?:INT\b)/,/^(?:STRING\b)/,/^(?:TEXT\b)/,/^(?:DECIMAL\b)/,/^(?:BOOLEAN\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:!=)/,/^(?:==)/,/^(?:<=)/,/^(?:>=)/,/^(?:<>)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?:,)/,/^(?:=)/,/^(?:[a-zA-Z][a-zA-Z0-9]+([_]+[a-zA-Z0-9]+)+)/,/^(?:([a-zA-Z]([a-zA-Z0-9])+))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizar;
exports.Parser = analizar.Parser;
exports.parse = function () { return analizar.parse.apply(analizar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}