/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,17],$V2=[1,18],$V3=[1,20],$V4=[1,12],$V5=[1,16],$V6=[1,15],$V7=[1,14],$V8=[5,15,16,32,44,45,49,50,51,53,56],$V9=[1,22],$Va=[1,23],$Vb=[1,28],$Vc=[1,29],$Vd=[2,65],$Ve=[18,19,42],$Vf=[1,41],$Vg=[1,55],$Vh=[1,56],$Vi=[1,57],$Vj=[1,44],$Vk=[1,47],$Vl=[1,43],$Vm=[1,45],$Vn=[1,46],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,52],$Vs=[1,53],$Vt=[18,19,37,38,39,52,62,63,64,65,66],$Vu=[5,15,16,18,19,32,42,44,45,49,50,51,53,56],$Vv=[1,66],$Vw=[1,67],$Vx=[42,55],$Vy=[18,19],$Vz=[1,82],$VA=[1,81],$VB=[5,15,16,18,19,23,32,37,38,39,42,44,45,49,50,51,53,56,59],$VC=[1,85],$VD=[1,83],$VE=[1,84],$VF=[1,86],$VG=[1,87],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[1,91],$VL=[1,92],$VM=[1,93],$VN=[1,94],$VO=[1,95],$VP=[1,96],$VQ=[1,97],$VR=[5,15,16,18,19,23,32,37,38,39,40,42,44,45,49,50,51,53,56,59,68,69,70,71,72,73,74,75,76,77,78,79,80,81],$VS=[5,15,16,18,19,21,23,32,37,38,39,40,42,44,45,49,50,51,52,53,56,59,68,69,70,71,72,73,74,75,76,77,78,79,80,81],$VT=[19,21],$VU=[19,21,42],$VV=[42,59],$VW=[1,118],$VX=[1,119],$VY=[1,120],$VZ=[1,121],$V_=[1,122],$V$=[1,123],$V01=[15,16,32,44,45,49,50,51,53,56],$V11=[5,15,16,18,19,23,32,37,38,39,42,44,45,49,50,51,53,56,59,68,69,71,72,73,74,75,76,77,78,79,80,81],$V21=[5,15,16,18,19,23,32,37,38,39,42,44,45,49,50,51,53,56,59,78,79,80,81],$V31=[44,45],$V41=[18,19,42,46,52,59],$V51=[2,45],$V61=[1,153],$V71=[1,154],$V81=[5,15,16,18,19,23,32,37,38,39,42,44,45,49,50,51,53,56,59,71,72,73,74,75,76,77,78,79,80,81],$V91=[1,159],$Va1=[1,160],$Vb1=[1,161],$Vc1=[18,19,37,38,39];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"acciones":4,"EOF":5,"realizar":6,"tabla":7,"e_p_c":8,"asignar_informacion_tabla":9,"imprimir":10,"declarar":11,"asignar":12,"asignar_valor":13,"if":14,"END":15,"IF":16,"select":17,";":18,"ERROR":19,"e_f_t":20,"FROM":21,"e_t_f":22,"THEN":23,"e_d":24,"dato":25,"e_c_s":26,"col_todo":27,"e_a_c_t":28,"atributo_tabla":29,"e_f_t_t":30,"tipo_atributo":31,"SELECT":32,"nombre_atributo":33,"s_f":34,"v_f":35,"tipjo_filtro":36,"WHERE":37,"LIMIT":38,"OFFSET":39,"*":40,"bucle_serie":41,",":42,"serie":43,"PROPERTY_NAME":44,"TABLE_NAME":45,"NAMEV":46,"nombre_serie":47,"final_if":48,"ELSE":49,"ELSEIF":50,"SET":51,"=":52,"DECLARE":53,"secuencia_nombres":54,"AS":55,"PRINT":56,"(":57,"dato_secuencia":58,")":59,"s_a_i":60,"nuveo_atributo":61,"INT":62,"STRING":63,"DECIMAL":64,"BOOLEAN":65,"TEX":66,"e":67,"+":68,"-":69,"/":70,"==":71,"!=":72,"<":73,"<=":74,">":75,">=":76,"<>":77,"OR":78,"AND":79,"||":80,"&&":81,"!":82,"NOT":83,"NUM":84,"INPUT":85,"TEXT":86,"u_v":87,"FALSE":88,"TRUE":89,"a_v":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"END",16:"IF",18:";",19:"ERROR",21:"FROM",23:"THEN",32:"SELECT",37:"WHERE",38:"LIMIT",39:"OFFSET",40:"*",42:",",44:"PROPERTY_NAME",45:"TABLE_NAME",46:"NAMEV",49:"ELSE",50:"ELSEIF",51:"SET",52:"=",53:"DECLARE",55:"AS",56:"PRINT",57:"(",59:")",62:"INT",63:"STRING",64:"DECIMAL",65:"BOOLEAN",66:"TEX",68:"+",69:"-",70:"/",71:"==",72:"!=",73:"<",74:"<=",75:">",76:">=",77:"<>",78:"OR",79:"AND",80:"||",81:"&&",82:"!",83:"NOT",84:"NUM",85:"INPUT",86:"TEXT",88:"FALSE",89:"TRUE"},
productions_: [0,[3,2],[4,2],[4,0],[6,2],[6,2],[6,2],[6,2],[6,2],[6,4],[6,2],[8,1],[8,1],[20,1],[20,1],[22,1],[22,1],[24,1],[24,1],[26,1],[26,1],[28,1],[28,1],[30,1],[30,1],[17,5],[34,1],[34,0],[35,2],[35,1],[36,2],[36,2],[36,2],[27,1],[27,1],[41,3],[41,1],[43,1],[43,1],[43,1],[47,3],[47,1],[14,5],[48,2],[48,5],[48,0],[13,2],[12,5],[12,3],[12,3],[12,1],[11,4],[54,3],[54,1],[10,4],[58,3],[58,1],[9,3],[9,1],[60,3],[7,4],[29,3],[29,1],[61,2],[33,1],[33,1],[31,1],[31,1],[31,1],[31,1],[31,1],[25,1],[67,3],[67,3],[67,3],[67,3],[67,2],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,2],[67,2],[67,1],[67,1],[67,4],[67,1],[67,1],[67,1],[67,1],[87,2],[90,2],[90,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$ = []; 
break;
case 4: case 6: case 7: case 8: case 10: case 98:
 this.$ = $$[$0-1]; 
break;
case 5:
 this.$ = new yy.ElementoTabla(this._$.first_line, this._$.first_column, $$[$0-1]); 
break;
case 9:
 this.$ = $$[$0-3]; 
break;
case 11: case 13: case 15: case 17: case 19: case 21: case 23: case 64: case 65: case 71:
 this.$ = $$[$0]; 
break;
case 37: case 38: case 39:
 this.$ = new yy.Valor(this._$.first_line, this._$.first_column, $$[$0], yy.TipoDato.VARIABLE); 
break;
case 54:
 this.$ = new yy.Imprimir(this._$.first_line, this._$.first_column, $$[$0-1]); 
break;
case 55: case 57: case 61:
this.$.push($$[$0]);
break;
case 56: case 58: case 62:
this.$ = []; this.$.push($$[$0]);
break;
case 59:
 this.$ = new yy.Asignacion(this._$.first_line, this._$.first_column, $$[$0-2], $$[$0]); 
break;
case 60:
 this.$ = new yy.Tabla(this._$.first_line, this._$.first_column, $$[$0-3], $$[$0-1]); 
break;
case 63:
 this.$ = new yy.Atributo(this._$.first_line, this._$.first_column, $$[$0-1], $$[$0]); 
break;
case 66:
 this.$ = yy.TipoDato.INT; 
break;
case 67: case 70:
 this.$ = yy.TipoDato.STRING; 
break;
case 68:
 this.$ = yy.TipoDato.DECIMAL; 
break;
case 69:
 this.$ = yy.TipoDato.BOOLEAN; 
break;
case 72:
 this.$ = new yy.Opereaciones(this._$.first_line, this._$.first_column, yy.TipoOperacion.SUMA,$$[$0-2],  $$[$0]); 
break;
case 73:
 this.$ = new yy.Opereaciones(this._$.first_line, this._$.first_column, yy.TipoOperacion.RESTA,$$[$0-2],  $$[$0]); 
break;
case 74:
 this.$ = new yy.Opereaciones(this._$.first_line, this._$.first_column, yy.TipoOperacion.MULTIPLICACION,$$[$0-2],  $$[$0]); 
break;
case 75:
 this.$ = new yy.Opereaciones(this._$.first_line, this._$.first_column, yy.TipoOperacion.DIVISION,$$[$0-2],  $$[$0]); 
break;
case 76:
 this.$ = new yy.Opereaciones(this._$.first_line, this._$.first_column, yy.TipoOperacion.NEGATIVO,undefined,$$[$0] ); 
break;
case 77:
this.$ = $$[$0-1];
break;
case 78:
 this.$ = new yy.Opereaciones(this._$.first_line, this._$.first_column, yy.TipoOperacion.IGUAL,$$[$0-2],  $$[$0]); 
break;
case 79: case 84:
 this.$ = new yy.Opereaciones(this._$.first_line, this._$.first_column, yy.TipoOperacion.NO_IGUAL,$$[$0-2],  $$[$0]); 
break;
case 80:
 this.$ = new yy.Opereaciones(this._$.first_line, this._$.first_column, yy.TipoOperacion.MENOR,$$[$0-2],  $$[$0]); 
break;
case 81:
 this.$ = new yy.Opereaciones(this._$.first_line, this._$.first_column, yy.TipoOperacion.MENOR_IGUAL,$$[$0-2],  $$[$0]); 
break;
case 82:
 this.$ = new yy.Opereaciones(this._$.first_line, this._$.first_column, yy.TipoOperacion.MAYOR,$$[$0-2],  $$[$0]); 
break;
case 83:
 this.$ = new yy.Opereaciones(this._$.first_line, this._$.first_column, yy.TipoOperacion.MAYOR_IGUAL,$$[$0-2],  $$[$0]); 
break;
case 85: case 87:
 this.$ = new yy.Opereaciones(this._$.first_line, this._$.first_column, yy.TipoOperacion.OR,$$[$0-2],  $$[$0]); 
break;
case 86:
 this.$ = new yy.Opereaciones(this._$.first_line, this._$.first_column, yy.TipoOperacion.AND,$$[$0-2],  $$[$0]); 
break;
case 88:
 this.$ = new yy.Opereaciones(this._$.first_line, this._$.first_column, yy.TipoOperacion.AND,$$[$0-2], $$[$0]); 
break;
case 89:
 this.$ = new yy.Opereaciones(this._$.first_line, this._$.first_column, yy.TipoOperacion.NEGACION,undefined,$$[$0] ); 
break;
case 90:
 this.$ = new yy.Opereaciones(this._$.first_line, this._$.first_column, yy.TipoOperacion.NEGACION,undefined,$$[$0]); 
break;
case 91:
 this.$ = new yy.Valor(this._$.first_line, this._$.first_column, $$[$0], yy.TipoDato.DECIMAL); 
break;
case 92:
 this.$ = new yy.Valor(this._$.first_line, this._$.first_column, $$[$0], yy.TipoDato.INT); 
break;
case 93:
 this.$ = new yy.Valor(this._$.first_line, this._$.first_column, $$[$0-3], yy.TipoDato.ENTRADA); 
break;
case 94:
 this.$ = new yy.Valor(this._$.first_line, this._$.first_column, $$[$0], yy.TipoDato.STRING); 
break;
case 95:
this.$ = $$[$0];
break;
case 96: case 97:
 this.$ = new yy.Valor(this._$.first_line, this._$.first_column, $$[$0], yy.TipoDato.BOOLEAN); 
break;
}
},
table: [o([5,16,32,44,45,51,53,56],$V0,{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,9:6,10:7,11:8,13:9,14:10,16:$V1,17:11,32:$V2,33:19,44:$V3,45:$V4,51:$V5,53:$V6,56:$V7,60:13},{1:[2,1]},o($V8,[2,2]),{8:21,18:$V9,19:$Va},{8:24,18:$V9,19:$Va,42:[1,25]},{8:26,18:$V9,19:$Va},{8:30,12:27,18:$V9,19:$Va,46:$Vb,52:$Vc},{8:31,18:$V9,19:$Va},{15:[1,32]},{8:33,18:$V9,19:$Va},{52:$Vd,57:[1,34]},o($Ve,[2,58]),{57:[1,35]},{46:[1,37],54:36},{8:30,12:38,18:$V9,19:$Va,46:$Vb,52:$Vc},{19:$Vf,24:39,25:40,43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:42,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{19:[1,60],26:58,27:59,40:[1,61],41:62,43:63,44:$Vg,45:$Vh,46:$Vi},{52:[1,64]},o($Vt,[2,64]),o($V8,[2,4]),o($Vu,[2,11]),o($Vu,[2,12]),o($V8,[2,5]),{33:19,44:$V3,45:$Vv,60:65},o($V8,[2,6]),o($V8,[2,7],{42:$Vw}),{52:[1,68]},{19:$Vf,24:69,25:40,43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:42,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},o($Vu,[2,50]),o($V8,[2,8]),{16:[1,70]},o($V8,[2,10]),{19:[1,73],28:71,29:72,33:75,44:$V3,45:$Vv,61:74},{19:$Vf,24:77,25:40,43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,58:76,64:$Vk,67:42,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{42:[1,79],55:[1,78]},o($Vx,[2,53]),o($Vy,[2,46],{42:$Vw}),{19:$Vz,22:80,23:$VA},o($VB,[2,17]),o($VB,[2,18]),o($VB,[2,71],{40:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ}),{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:98,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:99,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:100,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:101,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},o($VR,[2,91]),o($VR,[2,92]),{57:[1,102]},o($VR,[2,94]),o($VR,[2,95]),o($VR,[2,96]),o($VR,[2,97]),o($VR,[2,100],{90:103,52:[1,104]}),o($VS,[2,37]),o($VS,[2,38]),o($VS,[2,39]),{19:[1,107],20:105,21:[1,106]},o($VT,[2,19]),o($VT,[2,20]),o($VT,[2,33]),o($VT,[2,34],{42:[1,108]}),o($VU,[2,36]),{19:$Vf,24:109,25:40,43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:42,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},o($Ve,[2,57]),o($Vt,$Vd),{46:[1,110]},{19:$Vf,24:111,25:40,43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:42,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{8:112,18:$V9,19:$Va},{8:113,18:$V9,19:$Va},{59:[1,114]},{42:[1,115],59:[2,21]},{59:[2,22]},o($VV,[2,62]),{19:$VW,30:116,31:117,62:$VX,63:$VY,64:$VZ,65:$V_,66:$V$},{42:[1,125],59:[1,124]},o($VV,[2,56]),{19:$VW,30:126,31:117,62:$VX,63:$VY,64:$VZ,65:$V_,66:$V$},{46:[1,127]},o($V01,$V0,{4:128}),o($V01,[2,15]),o($V01,[2,16]),{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:129,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:130,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:131,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:132,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:133,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:134,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:135,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:136,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:137,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:138,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:139,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:140,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:141,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:142,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:143,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},o($V11,[2,76],{40:$VC,70:$VF}),{40:$VC,59:[1,144],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ},o($VB,[2,89],{40:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ}),o($V21,[2,90],{40:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM}),{86:[1,145]},o($VR,[2,98]),{43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:146,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{33:147,44:$V3,45:$Vv},o($V31,[2,13]),o($V31,[2,14]),{43:148,44:$Vg,45:$Vh,46:$Vi},o($Ve,[2,59]),{52:[1,149]},o($Vu,[2,48]),o($Vu,[2,49]),o($V8,[2,9]),o($Vy,[2,60]),{33:75,44:$V3,45:$Vv,61:150},o($VV,[2,63]),o($V41,[2,23]),o($V41,[2,24]),o($V41,[2,66]),o($V41,[2,67]),o($V41,[2,68]),o($V41,[2,69]),o($V41,[2,70]),o($Vy,[2,54]),{19:$Vf,24:151,25:40,43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:42,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},o([18,19,46,52],[2,51]),o($Vx,[2,52]),{6:4,7:5,9:6,10:7,11:8,13:9,14:10,15:$V51,16:$V1,17:11,32:$V2,33:19,44:$V3,45:$V4,48:152,49:$V61,50:$V71,51:$V5,53:$V6,56:$V7,60:13},o($V11,[2,72],{40:$VC,70:$VF}),o($V11,[2,73],{40:$VC,70:$VF}),o($VR,[2,74]),o($VR,[2,75]),o($V81,[2,78],{40:$VC,68:$VD,69:$VE,70:$VF}),o($V81,[2,79],{40:$VC,68:$VD,69:$VE,70:$VF}),o($V81,[2,80],{40:$VC,68:$VD,69:$VE,70:$VF}),o($V81,[2,81],{40:$VC,68:$VD,69:$VE,70:$VF}),o($V81,[2,82],{40:$VC,68:$VD,69:$VE,70:$VF}),o($V81,[2,83],{40:$VC,68:$VD,69:$VE,70:$VF}),o($V81,[2,84],{40:$VC,68:$VD,69:$VE,70:$VF}),o($V21,[2,85],{40:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM}),o($V21,[2,86],{40:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM}),o([5,15,16,18,19,23,32,37,38,39,42,44,45,49,50,51,53,56,59,80,81],[2,87],{40:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o([5,15,16,18,19,23,32,37,38,39,42,44,45,49,50,51,53,56,59,81],[2,88],{40:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP}),o($VR,[2,77]),{59:[1,155]},o($V81,[2,99],{40:$VC,68:$VD,69:$VE,70:$VF}),o($Vy,[2,27],{34:156,35:157,36:158,37:$V91,38:$Va1,39:$Vb1}),o($VU,[2,35]),{19:$Vf,24:162,25:40,43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:42,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},o($VV,[2,61]),o($VV,[2,55]),{15:[2,42]},o([15,16,32,44,45,51,53,56],$V0,{4:163}),{19:$Vf,24:164,25:40,43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:42,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},o($VR,[2,93]),o($Vy,[2,25]),o($Vy,[2,26],{36:165,37:$V91,38:$Va1,39:$Vb1}),o($Vc1,[2,29]),{19:$Vf,24:166,25:40,43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:42,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{19:$Vf,24:167,25:40,43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:42,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},{19:$Vf,24:168,25:40,43:54,44:$Vg,45:$Vh,46:$Vi,57:$Vj,64:$Vk,67:42,69:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:51,88:$Vr,89:$Vs},o($Vu,[2,47]),{6:4,7:5,9:6,10:7,11:8,13:9,14:10,15:[2,43],16:$V1,17:11,32:$V2,33:19,44:$V3,45:$V4,51:$V5,53:$V6,56:$V7,60:13},{19:$Vz,22:169,23:$VA},o($Vc1,[2,28]),o($Vc1,[2,30]),o($Vc1,[2,31]),o($Vc1,[2,32]),o($V01,$V0,{4:170}),{6:4,7:5,9:6,10:7,11:8,13:9,14:10,15:$V51,16:$V1,17:11,32:$V2,33:19,44:$V3,45:$V4,48:171,49:$V61,50:$V71,51:$V5,53:$V6,56:$V7,60:13},{15:[2,44]}],
defaultActions: {3:[2,1],73:[2,22],152:[2,42],171:[2,44]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    function printText(yytext) {
        /*sector de pruevas*/
    //console.log(yytext);
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:/* skip whitespace */
break;
case 3:
break;
case 4:
break;
case 5:
break;
case 6:
break;
case 7:printText(yy_.yytext+'  TEXT');return 86; 
break;
case 8:printText(yy_.yytext+'  TRUE');return 89;
break;
case 9:printText(yy_.yytext+'  FALSE');return 88;
break;
case 10:printText(yy_.yytext+'  DECIMAL');return 64;
break;
case 11:printText(yy_.yytext+'  NUM');return 84;
break;
case 12:printText(yy_.yytext+'  NAMEV');return 46
break;
case 13:printText(yy_.yytext+'  DECLARE');return 53
break;
case 14:printText(yy_.yytext+'  AS');return 55
break;
case 15:printText(yy_.yytext+'  SET');return 51
break;
case 16:printText(yy_.yytext+'  AND');return 79
break;
case 17:printText(yy_.yytext+'  OR');return 78
break;
case 18:printText(yy_.yytext+'  NOT');return 83
break;
case 19:printText(yy_.yytext+'  INPUT');return 85
break;
case 20:printText(yy_.yytext+'  PRINT');return 56
break;
case 21:printText(yy_.yytext+'  IF');return 16
break;
case 22:printText(yy_.yytext+'  THEN');return 23
break;
case 23:printText(yy_.yytext+'  END');return 15
break;
case 24:printText(yy_.yytext+'  END');return 15
break;
case 25:printText(yy_.yytext+'  ELSE');return 49
break;
case 26:printText(yy_.yytext+'  ELSEIF');return 50
break;
case 27:printText(yy_.yytext+'  SELECT');return 32
break;
case 28:printText(yy_.yytext+'  FROM');return 21
break;
case 29:printText(yy_.yytext+'  WHERE');return 37
break;
case 30:printText(yy_.yytext+'  LIMIT');return 38
break;
case 31:printText(yy_.yytext+'  OFFSET');return 39
break;
case 32:printText(yy_.yytext+'  INT');return 62;
break;
case 33:printText(yy_.yytext+'  STRING');return 63;
break;
case 34:printText(yy_.yytext+'  TEX');return 66;
break;
case 35:printText(yy_.yytext+'  DECIMAL');return 64;
break;
case 36:printText(yy_.yytext+'  BOOLEAN');return 65;
break;
case 37:printText(yy_.yytext+'  *');return 40;
break;
case 38:printText(yy_.yytext+'  /');return 70;
break;
case 39:printText(yy_.yytext+'  -');return 69;
break;
case 40:printText(yy_.yytext+'  +');return 68;
break;
case 41:printText(yy_.yytext+'  !=');return 72;
break;
case 42:printText(yy_.yytext+'  ==');return 71;
break;
case 43:printText(yy_.yytext+'  <=');return 74;
break;
case 44:printText(yy_.yytext+'  >=');return 76;
break;
case 45:printText(yy_.yytext+'  <>');return 77;
break;
case 46:printText(yy_.yytext+'  <');return 73;
break;
case 47:printText(yy_.yytext+'  >');return 75;
break;
case 48:printText(yy_.yytext+'  !');return 82;
break;
case 49:printText(yy_.yytext+'  ||');return 80;
break;
case 50:printText(yy_.yytext+'  &&');return 81;
break;
case 51:printText(yy_.yytext+'  (');return 57;
break;
case 52:printText(yy_.yytext+'  )');return 59;
break;
case 53:printText(yy_.yytext+'  ;');return 18;
break;
case 54:printText(yy_.yytext+'  ,');return 42;
break;
case 55:printText(yy_.yytext+'  =');return 52;
break;
case 56:printText(yy_.yytext+'  PROPERTY_NAME');return 44
break;
case 57:printText(yy_.yytext+'  TABLE_NAME');return 45
break;
case 58:printText(yy_.yytext+'  EOF');return 5;
break;
case 59:printText(yy_.yytext+'  INVALID');return 'INVALID';
break;
}
},
rules: [/^(?:[#][^\n]*\n)/,/^(?:[-][-][^\n]*\n)/,/^(?:\s+)/,/^(?:\f+)/,/^(?:\n+)/,/^(?:\r+)/,/^(?:\v+)/,/^(?:("[^\"]*"|['][^']*[']))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+)/,/^(?:@([a-zA-Z]([a-zA-Z0-9])+))/,/^(?:DECLARE\b)/,/^(?:AS\b)/,/^(?:SET\b)/,/^(?:AND\b)/,/^(?:OR\b)/,/^(?:NOT\b)/,/^(?:INPUT\b)/,/^(?:PRINT\b)/,/^(?:IF\b)/,/^(?:THEN\b)/,/^(?:END\b)/,/^(?:END\b)/,/^(?:ELSE\b)/,/^(?:ELSEIF\b)/,/^(?:SELECT\b)/,/^(?:FROM\b)/,/^(?:WHERE\b)/,/^(?:LIMIT\b)/,/^(?:OFFSET\b)/,/^(?:INT\b)/,/^(?:STRING\b)/,/^(?:TEXT\b)/,/^(?:DECIMAL\b)/,/^(?:BOOLEAN\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:!=)/,/^(?:==)/,/^(?:<=)/,/^(?:>=)/,/^(?:<>)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?:,)/,/^(?:=)/,/^(?:[a-zA-Z][a-zA-Z0-9]+([_]+[a-zA-Z0-9]+)+)/,/^(?:([a-zA-Z]([a-zA-Z0-9])+))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizar;
exports.Parser = analizar.Parser;
exports.parse = function () { return analizar.parse.apply(analizar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}