/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calculador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,18],$V2=[1,19],$V3=[1,12],$V4=[1,16],$V5=[1,15],$V6=[1,14],$V7=[5,16,17,19,33,34,39,40,41,46,48],$V8=[1,28],$V9=[1,26],$Va=[1,27],$Vb=[2,53],$Vc=[1,50],$Vd=[1,45],$Ve=[1,43],$Vf=[1,49],$Vg=[1,42],$Vh=[1,44],$Vi=[1,46],$Vj=[1,48],$Vk=[1,55],$Vl=[1,56],$Vm=[1,57],$Vn=[8,24,26,28,29,37,44,45,47,57,58,59,60,61,63,64,65,68,69,70,71,72,73,74,75,76,77,80],$Vo=[1,59],$Vp=[1,68],$Vq=[1,70],$Vr=[1,63],$Vs=[1,69],$Vt=[1,71],$Vu=[1,72],$Vv=[1,64],$Vw=[1,65],$Vx=[1,66],$Vy=[5,8,16,17,19,31,33,34,35,39,40,41,45,46,48],$Vz=[31,50],$VA=[8,31,45],$VB=[1,86],$VC=[1,90],$VD=[1,84],$VE=[1,85],$VF=[1,87],$VG=[1,88],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[1,94],$VL=[1,95],$VM=[1,96],$VN=[1,97],$VO=[1,98],$VP=[1,89],$VQ=[1,99],$VR=[8,29,37,44,45,63,64,65,68,69,70,71,72,73,74,75,76,77,80],$VS=[21,31],$VT=[5,8,16,17,19,31,33,34,35,39,40,41,44,45,46,48],$VU=[1,108],$VV=[1,109],$VW=[1,110],$VX=[1,111],$VY=[1,112],$VZ=[1,113],$V_=[1,114],$V$=[1,115],$V01=[1,116],$V11=[5,8,16,17,19,31,33,34,35,39,40,41,44,45,46,48,69,70,71,72,73,74,75,76,77],$V21=[1,120],$V31=[1,118],$V41=[1,119],$V51=[1,121],$V61=[5,8,16,17,19,29,31,33,34,35,39,40,41,44,45,46,48,63,64,65,69,70,71,72,73,74,75,76,77],$V71=[1,129],$V81=[1,130],$V91=[1,131],$Va1=[1,132],$Vb1=[1,133],$Vc1=[8,31],$Vd1=[31,44],$Ve1=[8,37,44,45,63,64,68,69,70,71,72,73,74,75,76,77,80],$Vf1=[5,8,16,17,19,31,33,34,35,39,40,41,44,45,46,48,63,64,69,70,71,72,73,74,75,76,77],$Vg1=[8,31,35,44,47],$Vh1=[2,28],$Vi1=[1,177],$Vj1=[1,178],$Vk1=[8,37,44,45,68,75,76,77],$Vl1=[8,37,44,45,68,69,70,71,72,73,74,75,76,77,80];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"acciones":4,"EOF":5,"realizar":6,"tabla":7,";":8,"asignar_informacion_tabla":9,"declarar":10,"asignar":11,"asignar_valor":12,"seguir":13,"imprimir":14,"if":15,"END":16,"IF":17,"select":18,"SELECT":19,"col_todo":20,"FROM":21,"nombre_atributo":22,"tipjo_filtro":23,"WHERE":24,"o_p":25,"LIMIT":26,"dato":27,"OFFSET":28,"*":29,"bucle_serie":30,",":31,"serie":32,"PROPERTY_NAME":33,"TABLE_NAME":34,"NAMEV":35,"nombre_serie":36,"THEN":37,"final_if":38,"ELSE":39,"ELSEIF":40,"PRINT":41,"(":42,"dato_secuencia":43,")":44,"AND":45,"SET":46,"=":47,"DECLARE":48,"secuencia_nombres":49,"AS":50,"tipo_atributo":51,"finalizar_operacion":52,"ERROR":53,"p":54,"TEXT":55,"atributo_tabla":56,"INT":57,"STRING":58,"DECIMAL":59,"BOOLEAN":60,"TEX":61,"e":62,"+":63,"-":64,"/":65,"NUM":66,"INPUT":67,"!":68,"!=":69,"==":70,"<":71,">":72,"<=":73,">=":74,"||":75,"&&":76,"OR":77,"TRUE":78,"FALSE":79,"<>":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",16:"END",17:"IF",19:"SELECT",21:"FROM",24:"WHERE",26:"LIMIT",28:"OFFSET",29:"*",31:",",33:"PROPERTY_NAME",34:"TABLE_NAME",35:"NAMEV",37:"THEN",39:"ELSE",40:"ELSEIF",41:"PRINT",42:"(",44:")",45:"AND",46:"SET",47:"=",48:"DECLARE",50:"AS",53:"ERROR",55:"TEXT",57:"INT",58:"STRING",59:"DECIMAL",60:"BOOLEAN",61:"TEX",63:"+",64:"-",65:"/",66:"NUM",67:"INPUT",68:"!",69:"!=",70:"==",71:"<",72:">",73:"<=",74:">=",75:"||",76:"&&",77:"OR",78:"TRUE",79:"FALSE",80:"<>"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,4],[6,1],[18,5],[23,3],[23,3],[23,3],[20,1],[20,1],[30,3],[30,1],[32,1],[32,1],[32,1],[36,3],[36,1],[15,5],[38,2],[38,5],[38,0],[14,4],[43,3],[43,1],[13,1],[13,2],[12,3],[12,2],[11,4],[11,3],[11,3],[11,1],[10,4],[49,3],[49,1],[9,5],[9,3],[52,1],[52,1],[27,1],[27,1],[7,4],[56,4],[56,2],[22,1],[22,1],[51,1],[51,1],[51,1],[51,1],[51,1],[62,3],[62,3],[62,3],[62,3],[62,2],[62,3],[62,1],[62,4],[54,2],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,1],[54,1],[54,1],[54,1],[25,3],[25,3],[25,3],[25,3],[25,2],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 5:
return this.$;
break;
case 59:
this.$ = $$[$0-2] + $$[$0];
break;
case 60: case 82:
this.$ = $$[$0-2] - $$[$0];
break;
case 61: case 83:
this.$ = $$[$0-2] * $$[$0];
break;
case 62: case 84:
this.$ = $$[$0-2] / $$[$0];
break;
case 63: case 86:
this.$ = -$$[$0];
break;
case 64: case 87:
this.$ = $$[$0-1];
break;
case 65: case 99:
this.$ = Number(yytext);
break;
case 85:

          this.$ = (function fact(n) { 
	    return n == 0 ? 1 : fact(n - 1) * n; 
	  })($$[$0-1]);
        
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,12:8,14:9,15:10,17:$V0,18:11,19:$V1,22:13,33:$V2,34:$V3,41:$V4,46:$V5,48:$V6},{1:[3]},{5:[1,20],6:21,7:5,9:6,10:7,12:8,14:9,15:10,17:$V0,18:11,19:$V1,22:13,33:$V2,34:$V3,41:$V4,46:$V5,48:$V6},{1:[2,2]},o($V7,[2,4]),{8:[1,22]},{8:[1,23],31:[1,24]},{8:$V8,11:25,35:$V9,47:$Va},{8:[1,31],13:29,31:[1,30],45:[1,32]},{8:[1,33]},{16:[1,34]},o($V7,[2,11]),{42:[1,35],47:$Vb},{47:[1,36]},{35:[1,38],49:37},{8:$V8,11:39,35:$V9,47:$Va},{42:[1,40]},{22:47,25:41,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},{20:51,29:[1,52],30:53,32:54,33:$Vk,34:$Vl,35:$Vm},o($Vn,[2,52]),{1:[2,1]},o($V7,[2,3]),o($V7,[2,5]),o($V7,[2,6]),{22:58,33:$V2,34:$Vc},o($V7,[2,7],{35:$Vo}),{47:[1,60]},{27:61,35:$Vp,42:$Vq,54:62,55:$Vr,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},o($Vy,[2,39]),o($V7,[2,8]),{8:$V8,11:73,35:$V9,47:$Va},o($V7,[2,32]),{8:$V8,11:74,35:$V9,47:$Va},o($V7,[2,9]),{17:[1,75]},{22:77,33:$V2,34:$Vc,56:76},{27:78,35:$Vp,42:$Vq,54:62,55:$Vr,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},{31:[1,80],50:[1,79]},o($Vz,[2,42]),o($VA,[2,35],{35:$Vo}),{27:82,35:$Vp,42:$Vq,43:81,54:62,55:$Vr,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},{29:$VB,37:[1,83],45:$VC,63:$VD,64:$VE,65:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,80:$VQ},{22:47,25:100,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},{22:47,25:101,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},o($VR,[2,99]),o($VR,[2,100]),o($VR,[2,101]),o($VR,[2,102]),o($VR,[2,103]),o($VR,[2,104]),o($Vn,$Vb),{21:[1,102]},{21:[2,16]},{21:[2,17],31:[1,103]},o($VS,[2,19]),o($VS,[2,20]),o($VS,[2,21]),o($VS,[2,22]),{47:[1,104]},{47:[1,105]},{27:106,35:$Vp,42:$Vq,54:62,55:$Vr,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},{8:[1,107]},o($VT,[2,47],{69:$VU,70:$VV,71:$VW,72:$VX,73:$VY,74:$VZ,75:$V_,76:$V$,77:$V01}),o($VT,[2,48]),{35:$Vp,42:$Vq,54:117,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},o($V11,[2,77]),o($V11,[2,78]),o($V11,[2,79],{29:$V21,63:$V31,64:$V41,65:$V51}),o($V11,[2,80]),{42:$Vq,62:122,64:$Vs,66:$Vt,67:$Vu},{42:$Vq,62:123,64:$Vs,66:$Vt,67:$Vu},o($V61,[2,65]),{42:[1,124]},o($VA,[2,34],{35:$Vo}),o($V7,[2,33],{35:$Vo}),{8:[1,125]},{31:[1,127],44:[1,126]},{51:128,57:$V71,58:$V81,59:$V91,60:$Va1,61:$Vb1},o($Vc1,[2,44]),{51:134,57:$V71,58:$V81,59:$V91,60:$Va1,61:$Vb1},{35:[1,135]},{31:[1,137],44:[1,136]},o($Vd1,[2,31]),{4:138,6:4,7:5,9:6,10:7,12:8,14:9,15:10,17:$V0,18:11,19:$V1,22:13,33:$V2,34:$V3,41:$V4,46:$V5,48:$V6},{22:47,25:139,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},{22:47,25:140,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},{22:47,25:141,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},{22:47,25:142,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},o($VR,[2,85]),{22:47,25:143,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},{22:47,25:144,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},{22:47,25:145,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},{22:47,25:146,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},{22:47,25:147,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},{22:47,25:148,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},{22:47,25:149,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},{22:47,25:150,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},{22:47,25:151,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},{22:47,25:152,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},{22:47,25:153,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},o($Ve1,[2,86],{29:$VB,65:$VF}),{29:$VB,44:[1,154],45:$VC,63:$VD,64:$VE,65:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,80:$VQ},{22:155,33:$V2,34:$Vc},{32:156,33:$Vk,34:$Vl,35:$Vm},{27:157,35:$Vp,42:$Vq,54:62,55:$Vr,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},{27:158,35:$Vp,42:$Vq,54:62,55:$Vr,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},o($Vy,[2,37]),o($Vy,[2,38]),{35:$Vp,42:$Vq,54:159,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},{35:$Vp,42:$Vq,54:160,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},{35:$Vp,42:$Vq,54:161,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},{35:$Vp,42:$Vq,54:162,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},{35:$Vp,42:$Vq,54:163,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},{35:$Vp,42:$Vq,54:164,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},{35:$Vp,42:$Vq,54:165,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},{35:$Vp,42:$Vq,54:166,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},{35:$Vp,42:$Vq,54:167,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},o($VT,[2,67],{69:$VU,70:$VV,71:$VW,72:$VX,73:$VY,74:$VZ,75:$V_,76:$V$,77:$V01}),{42:$Vq,62:168,64:$Vs,66:$Vt,67:$Vu},{42:$Vq,62:169,64:$Vs,66:$Vt,67:$Vu},{42:$Vq,62:170,64:$Vs,66:$Vt,67:$Vu},{42:$Vq,62:171,64:$Vs,66:$Vt,67:$Vu},o($Vf1,[2,63],{29:$V21,65:$V51}),{29:$V21,44:[1,172],63:$V31,64:$V41,65:$V51},{55:[1,173]},o($V7,[2,10]),{8:[2,49]},{22:174,33:$V2,34:$Vc},o($Vd1,[2,51]),o($Vg1,[2,54]),o($Vg1,[2,55]),o($Vg1,[2,56]),o($Vg1,[2,57]),o($Vg1,[2,58]),o([8,35,47],[2,40]),o($Vz,[2,41]),{8:[2,29]},{27:175,35:$Vp,42:$Vq,54:62,55:$Vr,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},{6:21,7:5,9:6,10:7,12:8,14:9,15:10,16:$Vh1,17:$V0,18:11,19:$V1,22:13,33:$V2,34:$V3,38:176,39:$Vi1,40:$Vj1,41:$V4,46:$V5,48:$V6},o($Ve1,[2,81],{29:$VB,65:$VF}),o($Ve1,[2,82],{29:$VB,65:$VF}),o($VR,[2,83]),o($VR,[2,84]),o($Vk1,[2,88],{29:$VB,63:$VD,64:$VE,65:$VF,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,80:$VQ}),o($Vk1,[2,89],{29:$VB,63:$VD,64:$VE,65:$VF,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,80:$VQ}),o($Vl1,[2,90],{29:$VB,63:$VD,64:$VE,65:$VF}),o($Vl1,[2,91],{29:$VB,63:$VD,64:$VE,65:$VF}),o($Vl1,[2,92],{29:$VB,63:$VD,64:$VE,65:$VF}),o($Vl1,[2,93],{29:$VB,63:$VD,64:$VE,65:$VF}),o($Vl1,[2,94],{29:$VB,63:$VD,64:$VE,65:$VF}),o($Vl1,[2,95],{29:$VB,63:$VD,64:$VE,65:$VF}),o([8,37,44,68,75,76],[2,96],{29:$VB,45:$VC,63:$VD,64:$VE,65:$VF,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,77:$VP,80:$VQ}),o([8,37,44,68,76],[2,97],{29:$VB,45:$VC,63:$VD,64:$VE,65:$VF,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,77:$VP,80:$VQ}),o($Vl1,[2,98],{29:$VB,63:$VD,64:$VE,65:$VF}),o($VR,[2,87]),{23:179,24:[1,180],26:[1,181],28:[1,182]},o($VS,[2,18]),o($Vc1,[2,43]),o($Vy,[2,36]),o($V11,[2,68]),o($V11,[2,69]),o($V11,[2,70]),o($V11,[2,71]),o($V11,[2,72]),o($V11,[2,73]),o([5,8,16,17,19,31,33,34,35,39,40,41,44,45,46,48,75,76],[2,74],{69:$VU,70:$VV,71:$VW,72:$VX,73:$VY,74:$VZ,77:$V01}),o([5,8,16,17,19,31,33,34,35,39,40,41,44,45,46,48,76],[2,75],{69:$VU,70:$VV,71:$VW,72:$VX,73:$VY,74:$VZ,75:$V_,77:$V01}),o([5,8,16,17,19,31,33,34,35,39,40,41,44,45,46,48,75,76,77],[2,76],{69:$VU,70:$VV,71:$VW,72:$VX,73:$VY,74:$VZ}),o($Vf1,[2,59],{29:$V21,65:$V51}),o($Vf1,[2,60],{29:$V21,65:$V51}),o($V61,[2,61]),o($V61,[2,62]),o($V61,[2,64]),{44:[1,183]},{51:184,57:$V71,58:$V81,59:$V91,60:$Va1,61:$Vb1},o($Vd1,[2,30]),{16:[2,25]},{4:185,6:4,7:5,9:6,10:7,12:8,14:9,15:10,17:$V0,18:11,19:$V1,22:13,33:$V2,34:$V3,41:$V4,46:$V5,48:$V6},{22:47,25:186,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},o($V7,[2,12]),{22:47,25:187,33:$V2,34:$Vc,35:$Vd,42:$Ve,55:$Vf,64:$Vg,66:$Vh,78:$Vi,79:$Vj},{27:188,35:$Vp,42:$Vq,54:62,55:$Vr,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},{27:189,35:$Vp,42:$Vq,54:62,55:$Vr,62:67,64:$Vs,66:$Vt,67:$Vu,68:$Vv,78:$Vw,79:$Vx},o($V61,[2,66]),o($Vd1,[2,50]),{6:21,7:5,9:6,10:7,12:8,14:9,15:10,16:[2,26],17:$V0,18:11,19:$V1,22:13,33:$V2,34:$V3,41:$V4,46:$V5,48:$V6},{29:$VB,37:[1,190],45:$VC,63:$VD,64:$VE,65:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,80:$VQ},{8:[1,191],29:$VB,45:$VC,63:$VD,64:$VE,65:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,80:$VQ},{8:[1,192]},{8:[1,193]},{4:194,6:4,7:5,9:6,10:7,12:8,14:9,15:10,17:$V0,18:11,19:$V1,22:13,33:$V2,34:$V3,41:$V4,46:$V5,48:$V6},o($V7,[2,13]),o($V7,[2,14]),o($V7,[2,15]),{6:21,7:5,9:6,10:7,12:8,14:9,15:10,16:$Vh1,17:$V0,18:11,19:$V1,22:13,33:$V2,34:$V3,38:195,39:$Vi1,40:$Vj1,41:$V4,46:$V5,48:$V6},{16:[2,27]}],
defaultActions: {3:[2,2],20:[2,1],52:[2,16],126:[2,49],136:[2,29],176:[2,25],195:[2,27]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:/* skip whitespace */
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:
break;
case 6:/* console.log('<STRING>'+yy_.yytext);  */   return 55; 
break;
case 7:return 78;
break;
case 8:return 79;
break;
case 9:return 66;
break;
case 10:return 35
break;
case 11:return 48
break;
case 12:return 50
break;
case 13:return 46
break;
case 14:return 45
break;
case 15:return 77
break;
case 16:return 67
break;
case 17:return 41
break;
case 18:return 17
break;
case 19:return 37
break;
case 20:return 16
break;
case 21:return 40
break;
case 22:return 19
break;
case 23:return 21
break;
case 24:return 24
break;
case 25:return 26
break;
case 26:return 28
break;
case 27:return 57;
break;
case 28:return 58;
break;
case 29:return 61;
break;
case 30:return 59;
break;
case 31:return 60;
break;
case 32:return 29;
break;
case 33:return 65;
break;
case 34:return 64;
break;
case 35:return 63;
break;
case 36:return 69;
break;
case 37:return 70;
break;
case 38:return 73;
break;
case 39:return 74;
break;
case 40:return 80;
break;
case 41:return 71;
break;
case 42:return 72;
break;
case 43:return 68;
break;
case 44:return 75;
break;
case 45:return 76;
break;
case 46:return 42;
break;
case 47:return 44;
break;
case 48:return 8;
break;
case 49:return 31;
break;
case 50:return 47;
break;
case 51:return 33
break;
case 52:return 34
break;
case 53:return 5;
break;
case 54:console.log('<ERROR>'+yy_.yytext);return 'INVALID';
break;
}
},
rules: [/^(?:[#][^\n]*\n)/,/^(?:\s+)/,/^(?:\f+)/,/^(?:\n+)/,/^(?:\r+)/,/^(?:\v+)/,/^(?:("[^\"]*"|['][^']*[']))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:@([a-zA-Z]([a-zA-Z0-9])+))/,/^(?:DECLARE\b)/,/^(?:AS\b)/,/^(?:SET\b)/,/^(?:AND\b)/,/^(?:OR\b)/,/^(?:INPUT\b)/,/^(?:PRINT\b)/,/^(?:IF\b)/,/^(?:THEN\b)/,/^(?:END\b)/,/^(?:ELSEIF\b)/,/^(?:SELECT\b)/,/^(?:FROM\b)/,/^(?:WHERE\b)/,/^(?:LIMIT\b)/,/^(?:OFFSET\b)/,/^(?:INT\b)/,/^(?:STRING\b)/,/^(?:TEXT\b)/,/^(?:DECIMAL\b)/,/^(?:BOOLEAN\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:!=)/,/^(?:==)/,/^(?:<=)/,/^(?:>=)/,/^(?:<>)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?:,)/,/^(?:=)/,/^(?:[a-zA-Z][a-zA-Z0-9]+([_]+[a-zA-Z0-9]+)+)/,/^(?:([a-zA-Z]([a-zA-Z0-9])+))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = calculador;
exports.Parser = calculador.Parser;
exports.parse = function () { return calculador.parse.apply(calculador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}