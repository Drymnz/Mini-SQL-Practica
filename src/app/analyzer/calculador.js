/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calculador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,15],$V2=[1,14],$V3=[1,13],$V4=[1,11],$V5=[1,17],$V6=[5,16,20,21,22,23,30,33,42,44],$V7=[1,26],$V8=[1,24],$V9=[1,25],$Va=[2,39],$Vb=[1,40],$Vc=[1,42],$Vd=[1,39],$Ve=[1,41],$Vf=[1,43],$Vg=[1,44],$Vh=[32,45,46,47,48,49],$Vi=[1,46],$Vj=[1,47],$Vk=[1,58],$Vl=[1,56],$Vm=[1,51],$Vn=[1,57],$Vo=[1,59],$Vp=[1,60],$Vq=[1,52],$Vr=[1,53],$Vs=[1,54],$Vt=[5,8,16,20,21,22,23,27,29,30,31,33,42,44],$Vu=[27,35],$Vv=[8,27,29],$Vw=[1,77],$Vx=[1,71],$Vy=[1,72],$Vz=[1,73],$VA=[1,74],$VB=[1,75],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[1,81],$VG=[1,82],$VH=[1,83],$VI=[1,84],$VJ=[1,85],$VK=[1,76],$VL=[18,26,29,51,52,53,54,57,58,59,60,61,62,63,64,65,66],$VM=[5,8,16,20,21,22,23,26,27,29,30,31,33,42,44],$VN=[1,92],$VO=[1,93],$VP=[1,94],$VQ=[1,95],$VR=[1,96],$VS=[1,97],$VT=[1,98],$VU=[1,99],$VV=[1,100],$VW=[5,8,16,20,21,22,23,26,27,29,30,31,33,42,44,58,59,60,61,62,63,64,65,66],$VX=[1,102],$VY=[1,103],$VZ=[1,104],$V_=[1,105],$V$=[5,8,16,20,21,22,23,26,27,29,30,31,33,42,44,51,52,53,54,58,59,60,61,62,63,64,65,66],$V01=[1,112],$V11=[1,113],$V21=[1,114],$V31=[1,115],$V41=[1,116],$V51=[8,27],$V61=[26,27],$V71=[18,26,29,51,52,57,58,59,60,61,62,63,64,65,66],$V81=[5,8,16,20,21,22,23,26,27,29,30,31,33,42,44,51,52,58,59,60,61,62,63,64,65,66],$V91=[8,26,27,31,32],$Va1=[2,14],$Vb1=[1,157],$Vc1=[1,158],$Vd1=[18,26,29,57,64,65,66],$Ve1=[18,26,29,57,58,59,60,61,62,63,64,65,66];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"acciones":4,"EOF":5,"realizar":6,"tabla":7,";":8,"asignar_informacion_tabla":9,"declarar":10,"asignar":11,"asignar_valor":12,"seguir":13,"imprimir":14,"if":15,"IF":16,"o_p":17,"THEN":18,"final_if":19,"END":20,"ELSE":21,"ELSEIF":22,"PRINT":23,"(":24,"dato_secuencia":25,")":26,",":27,"dato":28,"AND":29,"SET":30,"NAMEV":31,"=":32,"DECLARE":33,"secuencia_nombres":34,"AS":35,"tipo_atributo":36,"nombre_atributo":37,"finalizar_operacion":38,"ERROR":39,"p":40,"TEXT":41,"TABLE_NAME":42,"atributo_tabla":43,"PROPERTY_NAME":44,"INT":45,"STRING":46,"DECIMAL":47,"BOOLEAN":48,"TEX":49,"e":50,"+":51,"-":52,"*":53,"/":54,"NUM":55,"INPUT":56,"!":57,"!=":58,"==":59,"<":60,">":61,"<=":62,">=":63,"||":64,"&&":65,"OR":66,"TRUE":67,"FALSE":68,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",16:"IF",18:"THEN",20:"END",21:"ELSE",22:"ELSEIF",23:"PRINT",24:"(",26:")",27:",",29:"AND",30:"SET",31:"NAMEV",32:"=",33:"DECLARE",35:"AS",39:"ERROR",41:"TEXT",42:"TABLE_NAME",44:"PROPERTY_NAME",45:"INT",46:"STRING",47:"DECIMAL",48:"BOOLEAN",49:"TEX",51:"+",52:"-",53:"*",54:"/",55:"NUM",56:"INPUT",57:"!",58:"!=",59:"==",60:"<",61:">",62:"<=",63:">=",64:"||",65:"&&",66:"OR",67:"TRUE",68:"FALSE"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[15,8],[19,2],[19,5],[19,0],[14,4],[25,3],[25,1],[13,1],[13,2],[12,3],[12,2],[11,4],[11,3],[11,3],[11,1],[10,4],[34,3],[34,1],[9,5],[9,3],[38,1],[38,1],[28,1],[28,1],[7,4],[43,4],[43,2],[37,1],[37,1],[36,1],[36,1],[36,1],[36,1],[36,1],[50,3],[50,3],[50,3],[50,3],[50,2],[50,3],[50,1],[50,4],[40,2],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,1],[40,1],[40,1],[40,1],[17,3],[17,3],[17,3],[17,3],[17,2],[17,2],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,1],[17,1],[17,1],[17,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 5:
return this.$;
break;
case 45:
this.$ = $$[$0-2] + $$[$0];
break;
case 46: case 68:
this.$ = $$[$0-2] - $$[$0];
break;
case 47: case 69:
this.$ = $$[$0-2] * $$[$0];
break;
case 48: case 70:
this.$ = $$[$0-2] / $$[$0];
break;
case 49: case 72:
this.$ = -$$[$0];
break;
case 50: case 73:
this.$ = $$[$0-1];
break;
case 51: case 84:
this.$ = Number(yytext);
break;
case 71:

          this.$ = (function fact(n) { 
	    return n == 0 ? 1 : fact(n - 1) * n; 
	  })($$[$0-1]);
        
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,12:8,14:9,15:10,16:$V0,23:$V1,30:$V2,33:$V3,37:12,42:$V4,44:$V5},{1:[3]},{5:[1,18],6:19,7:5,9:6,10:7,12:8,14:9,15:10,16:$V0,23:$V1,30:$V2,33:$V3,37:12,42:$V4,44:$V5},{1:[2,2]},o($V6,[2,4]),{8:[1,20]},{8:[1,21],27:[1,22]},{8:$V7,11:23,31:$V8,32:$V9},{8:[1,29],13:27,27:[1,28],29:[1,30]},{8:[1,31]},o($V6,[2,10]),{24:[1,32],32:$Va},{32:[1,33]},{31:[1,35],34:34},{8:$V7,11:36,31:$V8,32:$V9},{24:[1,37]},{17:38,24:$Vb,31:$Vc,52:$Vd,55:$Ve,67:$Vf,68:$Vg},o($Vh,[2,38]),{1:[2,1]},o($V6,[2,3]),o($V6,[2,5]),o($V6,[2,6]),{37:45,42:$Vi,44:$V5},o($V6,[2,7],{31:$Vj}),{32:[1,48]},{24:$Vk,28:49,31:$Vl,40:50,41:$Vm,50:55,52:$Vn,55:$Vo,56:$Vp,57:$Vq,67:$Vr,68:$Vs},o($Vt,[2,25]),o($V6,[2,8]),{8:$V7,11:61,31:$V8,32:$V9},o($V6,[2,18]),{8:$V7,11:62,31:$V8,32:$V9},o($V6,[2,9]),{37:64,42:$Vi,43:63,44:$V5},{24:$Vk,28:65,31:$Vl,40:50,41:$Vm,50:55,52:$Vn,55:$Vo,56:$Vp,57:$Vq,67:$Vr,68:$Vs},{27:[1,67],35:[1,66]},o($Vu,[2,28]),o($Vv,[2,21],{31:$Vj}),{24:$Vk,25:68,28:69,31:$Vl,40:50,41:$Vm,50:55,52:$Vn,55:$Vo,56:$Vp,57:$Vq,67:$Vr,68:$Vs},{18:[1,70],29:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK},{17:86,24:$Vb,31:$Vc,52:$Vd,55:$Ve,67:$Vf,68:$Vg},{17:87,24:$Vb,31:$Vc,52:$Vd,55:$Ve,67:$Vf,68:$Vg},o($VL,[2,84]),o($VL,[2,85]),o($VL,[2,86]),o($VL,[2,87]),{32:[1,88]},o($Vh,$Va),{32:[1,89]},{24:$Vk,28:90,31:$Vl,40:50,41:$Vm,50:55,52:$Vn,55:$Vo,56:$Vp,57:$Vq,67:$Vr,68:$Vs},{8:[1,91]},o($VM,[2,33],{58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV}),o($VM,[2,34]),{24:$Vk,31:$Vl,40:101,50:55,52:$Vn,55:$Vo,56:$Vp,57:$Vq,67:$Vr,68:$Vs},o($VW,[2,63]),o($VW,[2,64]),o($VW,[2,65],{51:$VX,52:$VY,53:$VZ,54:$V_}),o($VW,[2,66]),{24:$Vk,50:106,52:$Vn,55:$Vo,56:$Vp},{24:$Vk,50:107,52:$Vn,55:$Vo,56:$Vp},o($V$,[2,51]),{24:[1,108]},o($Vv,[2,20],{31:$Vj}),o($V6,[2,19],{31:$Vj}),{26:[1,109],27:[1,110]},{36:111,45:$V01,46:$V11,47:$V21,48:$V31,49:$V41},o($V51,[2,30]),{36:117,45:$V01,46:$V11,47:$V21,48:$V31,49:$V41},{31:[1,118]},{26:[1,119],27:[1,120]},o($V61,[2,17]),{4:121,6:4,7:5,9:6,10:7,12:8,14:9,15:10,16:$V0,23:$V1,30:$V2,33:$V3,37:12,42:$V4,44:$V5},{17:122,24:$Vb,31:$Vc,52:$Vd,55:$Ve,67:$Vf,68:$Vg},{17:123,24:$Vb,31:$Vc,52:$Vd,55:$Ve,67:$Vf,68:$Vg},{17:124,24:$Vb,31:$Vc,52:$Vd,55:$Ve,67:$Vf,68:$Vg},{17:125,24:$Vb,31:$Vc,52:$Vd,55:$Ve,67:$Vf,68:$Vg},o($VL,[2,71]),{17:126,24:$Vb,31:$Vc,52:$Vd,55:$Ve,67:$Vf,68:$Vg},{17:127,24:$Vb,31:$Vc,52:$Vd,55:$Ve,67:$Vf,68:$Vg},{17:128,24:$Vb,31:$Vc,52:$Vd,55:$Ve,67:$Vf,68:$Vg},{17:129,24:$Vb,31:$Vc,52:$Vd,55:$Ve,67:$Vf,68:$Vg},{17:130,24:$Vb,31:$Vc,52:$Vd,55:$Ve,67:$Vf,68:$Vg},{17:131,24:$Vb,31:$Vc,52:$Vd,55:$Ve,67:$Vf,68:$Vg},{17:132,24:$Vb,31:$Vc,52:$Vd,55:$Ve,67:$Vf,68:$Vg},{17:133,24:$Vb,31:$Vc,52:$Vd,55:$Ve,67:$Vf,68:$Vg},{17:134,24:$Vb,31:$Vc,52:$Vd,55:$Ve,67:$Vf,68:$Vg},{17:135,24:$Vb,31:$Vc,52:$Vd,55:$Ve,67:$Vf,68:$Vg},o($V71,[2,72],{53:$Vz,54:$VA}),{26:[1,136],29:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK},{24:$Vk,28:137,31:$Vl,40:50,41:$Vm,50:55,52:$Vn,55:$Vo,56:$Vp,57:$Vq,67:$Vr,68:$Vs},{24:$Vk,28:138,31:$Vl,40:50,41:$Vm,50:55,52:$Vn,55:$Vo,56:$Vp,57:$Vq,67:$Vr,68:$Vs},o($Vt,[2,23]),o($Vt,[2,24]),{24:$Vk,31:$Vl,40:139,50:55,52:$Vn,55:$Vo,56:$Vp,57:$Vq,67:$Vr,68:$Vs},{24:$Vk,31:$Vl,40:140,50:55,52:$Vn,55:$Vo,56:$Vp,57:$Vq,67:$Vr,68:$Vs},{24:$Vk,31:$Vl,40:141,50:55,52:$Vn,55:$Vo,56:$Vp,57:$Vq,67:$Vr,68:$Vs},{24:$Vk,31:$Vl,40:142,50:55,52:$Vn,55:$Vo,56:$Vp,57:$Vq,67:$Vr,68:$Vs},{24:$Vk,31:$Vl,40:143,50:55,52:$Vn,55:$Vo,56:$Vp,57:$Vq,67:$Vr,68:$Vs},{24:$Vk,31:$Vl,40:144,50:55,52:$Vn,55:$Vo,56:$Vp,57:$Vq,67:$Vr,68:$Vs},{24:$Vk,31:$Vl,40:145,50:55,52:$Vn,55:$Vo,56:$Vp,57:$Vq,67:$Vr,68:$Vs},{24:$Vk,31:$Vl,40:146,50:55,52:$Vn,55:$Vo,56:$Vp,57:$Vq,67:$Vr,68:$Vs},{24:$Vk,31:$Vl,40:147,50:55,52:$Vn,55:$Vo,56:$Vp,57:$Vq,67:$Vr,68:$Vs},o($VM,[2,53],{58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT,65:$VU,66:$VV}),{24:$Vk,50:148,52:$Vn,55:$Vo,56:$Vp},{24:$Vk,50:149,52:$Vn,55:$Vo,56:$Vp},{24:$Vk,50:150,52:$Vn,55:$Vo,56:$Vp},{24:$Vk,50:151,52:$Vn,55:$Vo,56:$Vp},o($V81,[2,49],{53:$VZ,54:$V_}),{26:[1,152],51:$VX,52:$VY,53:$VZ,54:$V_},{41:[1,153]},{8:[2,35]},{37:154,42:$Vi,44:$V5},o($V61,[2,37]),o($V91,[2,40]),o($V91,[2,41]),o($V91,[2,42]),o($V91,[2,43]),o($V91,[2,44]),o([8,31,32],[2,26]),o($Vu,[2,27]),{8:[2,15]},{24:$Vk,28:155,31:$Vl,40:50,41:$Vm,50:55,52:$Vn,55:$Vo,56:$Vp,57:$Vq,67:$Vr,68:$Vs},{6:19,7:5,9:6,10:7,12:8,14:9,15:10,16:$V0,19:156,20:$Va1,21:$Vb1,22:$Vc1,23:$V1,30:$V2,33:$V3,37:12,42:$V4,44:$V5},o($V71,[2,67],{53:$Vz,54:$VA}),o($V71,[2,68],{53:$Vz,54:$VA}),o($VL,[2,69]),o($VL,[2,70]),o($Vd1,[2,74],{51:$Vx,52:$Vy,53:$Vz,54:$VA,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o($Vd1,[2,75],{51:$Vx,52:$Vy,53:$Vz,54:$VA,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o($Ve1,[2,76],{51:$Vx,52:$Vy,53:$Vz,54:$VA}),o($Ve1,[2,77],{51:$Vx,52:$Vy,53:$Vz,54:$VA}),o($Ve1,[2,78],{51:$Vx,52:$Vy,53:$Vz,54:$VA}),o($Ve1,[2,79],{51:$Vx,52:$Vy,53:$Vz,54:$VA}),o($Ve1,[2,80],{51:$Vx,52:$Vy,53:$Vz,54:$VA}),o($Ve1,[2,81],{51:$Vx,52:$Vy,53:$Vz,54:$VA}),o([18,26,57,64,65],[2,82],{29:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,66:$VK}),o([18,26,57,65],[2,83],{29:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,66:$VK}),o($VL,[2,73]),o($V51,[2,29]),o($Vt,[2,22]),o($VW,[2,54]),o($VW,[2,55]),o($VW,[2,56]),o($VW,[2,57]),o($VW,[2,58]),o($VW,[2,59]),o([5,8,16,20,21,22,23,26,27,29,30,31,33,42,44,64,65],[2,60],{58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,66:$VV}),o([5,8,16,20,21,22,23,26,27,29,30,31,33,42,44,65],[2,61],{58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT,66:$VV}),o([5,8,16,20,21,22,23,26,27,29,30,31,33,42,44,64,65,66],[2,62],{58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS}),o($V81,[2,45],{53:$VZ,54:$V_}),o($V81,[2,46],{53:$VZ,54:$V_}),o($V$,[2,47]),o($V$,[2,48]),o($V$,[2,50]),{26:[1,159]},{36:160,45:$V01,46:$V11,47:$V21,48:$V31,49:$V41},o($V61,[2,16]),{20:[1,161]},{4:162,6:4,7:5,9:6,10:7,12:8,14:9,15:10,16:$V0,23:$V1,30:$V2,33:$V3,37:12,42:$V4,44:$V5},{17:163,24:$Vb,31:$Vc,52:$Vd,55:$Ve,67:$Vf,68:$Vg},o($V$,[2,52]),o($V61,[2,36]),{16:[1,164]},{6:19,7:5,9:6,10:7,12:8,14:9,15:10,16:$V0,20:[2,12],23:$V1,30:$V2,33:$V3,37:12,42:$V4,44:$V5},{18:[1,165],29:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK},{8:[1,166]},{4:167,6:4,7:5,9:6,10:7,12:8,14:9,15:10,16:$V0,23:$V1,30:$V2,33:$V3,37:12,42:$V4,44:$V5},o($V6,[2,11]),{6:19,7:5,9:6,10:7,12:8,14:9,15:10,16:$V0,19:168,20:$Va1,21:$Vb1,22:$Vc1,23:$V1,30:$V2,33:$V3,37:12,42:$V4,44:$V5},{20:[2,13]}],
defaultActions: {3:[2,2],18:[2,1],109:[2,35],119:[2,15],168:[2,13]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:/* skip whitespace */
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:
break;
case 6:/* console.log('<STRING>'+yy_.yytext);  */   return 41; 
break;
case 7:return 67;
break;
case 8:return 68;
break;
case 9:return 55;
break;
case 10:return 31
break;
case 11:return 33
break;
case 12:return 35
break;
case 13:return 30
break;
case 14:return 29
break;
case 15:return 66
break;
case 16:return 56
break;
case 17:return 23
break;
case 18:return 16
break;
case 19:return 18
break;
case 20:return 20
break;
case 21:return 22
break;
case 22:return 45;
break;
case 23:return 46;
break;
case 24:return 49;
break;
case 25:return 47;
break;
case 26:return 48;
break;
case 27:return 53;
break;
case 28:return 54;
break;
case 29:return 52;
break;
case 30:return 51;
break;
case 31:return 58;
break;
case 32:return 59;
break;
case 33:return 60;
break;
case 34:return 61;
break;
case 35:return 62;
break;
case 36:return 63;
break;
case 37:return 57;
break;
case 38:return 64;
break;
case 39:return 65;
break;
case 40:return 24;
break;
case 41:return 26;
break;
case 42:return 8;
break;
case 43:return 27;
break;
case 44:return 32;
break;
case 45:return 44
break;
case 46:return 42
break;
case 47:return 5;
break;
case 48:console.log('<ERROR>'+yy_.yytext);return 'INVALID';
break;
}
},
rules: [/^(?:[#][^\n]*\n)/,/^(?:\s+)/,/^(?:\f+)/,/^(?:\n+)/,/^(?:\r+)/,/^(?:\v+)/,/^(?:("[^\"]*"|['][^']*[']))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:@([a-zA-Z]([a-zA-Z0-9])+))/,/^(?:DECLARE\b)/,/^(?:AS\b)/,/^(?:SET\b)/,/^(?:AND\b)/,/^(?:OR\b)/,/^(?:INPUT\b)/,/^(?:PRINT\b)/,/^(?:IF\b)/,/^(?:THEN\b)/,/^(?:END\b)/,/^(?:ELSEIF\b)/,/^(?:INT\b)/,/^(?:STRING\b)/,/^(?:TEXT\b)/,/^(?:DECIMAL\b)/,/^(?:BOOLEAN\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:!=)/,/^(?:==)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:!)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?:,)/,/^(?:=)/,/^(?:[a-zA-Z][a-zA-Z0-9]+([_]+[a-zA-Z0-9]+)+)/,/^(?:([a-zA-Z]([a-zA-Z0-9])+))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = calculador;
exports.Parser = calculador.Parser;
exports.parse = function () { return calculador.parse.apply(calculador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}